AWSTemplateFormatVersion: "2010-09-09"
Description: "Hosting Static Webiste on S3, Cloudfront and Route 53"
Parameters:
  Application:
    Description: Provide Name of the Application.
    Type: String
    Default: 'Web'
  Environment:
    Description: The type of Env. For Ex- PROD, TEST, STG, NON-PROD.
    Type: String
    Default: 'PROD'
  DomainName:
    Description: Domain name
    Type: String
    Default: www.jaswanth.cf
  Versioning:
    Type: String
    Description: Should we enable versioning on the Bucket
    Default: "Enabled"
    AllowedValues:
      - "Enabled"
      - "Suspended"
  PreventDeletion:
    Type: String
    Description: Should we prevent deletion of the Bucket
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
  PriceClassValue:
    Type: String
    Description: CloudFront distribution price class
    Default: "PriceClass_200"
    AllowedValues:
      - "PriceClass_100"
      - "PriceClass_200"
      - "PriceClass_All"    
  CertificateManager:
    Description: Enter the arn Which is already imported
    Type: String
    Default: arn:aws:acm:us-east-1:168952816319:certificate/a17dfb82-4b63-463e-921a-aa3370c15727
  EncryptAtRest:
    Type: String
    Description: Should we enable encryption at rest for the Bucket
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
  EncryptInTransit:
    Type: String
    Description: Should we enable encryption during the transit
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
  CodePipelineProjectName:
    Description: CodePipeline CD Project Name
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*$
    Default: SampleCloudFormationCodePipeline
  GitHubOwner:
    Description: Type of GitHubOwner.
    Type: String
    Default: B-jaswanth
  GitHubRepo:
    Description: Type of GitHubRepo.
    Type: String
    Default: jash
  GitHubBranch:
    Description: Type of GitHubBranch.
    Type: String
    Default: main
  GitHubToken:
    Description: Type of GitHubToken.
    Type: String
    Default: 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
  Prefix:
    Description: File Prefix.
    Type: String
    Default: fa-047
  Handler:
    Description: Lambda handler.
    Type: String
    Default: index.lambda_handler
  Runtime:
    Description: Type of this BacketName.
    Type: String
    Default: python3.8
  BucketArn:
    Description: Type of this arn.
    Type: String
    Default: arn:aws:s3:::www.jaswanth.cf

Conditions:
  UseBucketPreventDeletion: !Equals 
    - !Ref PreventDeletion
    - 'Yes'
  UseBucketEncryption: !Equals 
    - !Ref EncryptAtRest
    - 'Yes'
  UseEncryptInTransit: !Equals 
    - !Ref EncryptInTransit
    - 'Yes'

Resources:
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref DomainName
      LifecycleConfiguration:
        Rules:
          - Id: lifecycleofbucket
            Prefix: logs
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
            ExpirationInDays: 365
      VersioningConfiguration:
        Status: !Ref Versioning
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        ErrorDocument: "404.html"
        IndexDocument: "index.html"
      Tags:
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Ref DomainName   

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: AllowCloudFrontServicePrincipalReadOnly
              Effect: "Allow"
              Action: "s3:GetObject"
              Principal: 
                CanonicalUser:
                  Fn::GetAtt: [ CloudFrontOriginAccessIdentity , S3CanonicalUserId ]
              Resource: !Sub "${S3Bucket.Arn}/*"
            - !If 
              - UseBucketPreventDeletion
              - Action:
                  - 's3:DeleteBucket'
                Effect: Deny
                Resource: !Join 
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref S3Bucket
                Principal: '*'
              - !Ref 'AWS::NoValue'
            - !If 
              - UseEncryptInTransit
              - Action:
                  - 's3:GetObject'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref S3Bucket
                    - /*
                Condition:
                  Bool:
                    'aws:SecureTransport': false
                Principal: '*'
              - !Ref 'AWS::NoValue'  

  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "Access Identity for ${S3Bucket}"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        WebACLId: !GetAtt WebAcl.Arn
        Aliases:
          - !Ref DomainName
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/404.html'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: true
          MaxTTL: 31536000
          SmoothStreaming: false
          TargetOriginId: !Ref S3Bucket
          ViewerProtocolPolicy: 'redirect-to-https'
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - DomainName: !GetAtt S3Bucket.DomainName
            Id: !Ref S3Bucket
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
        PriceClass: !Ref PriceClassValue
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateManager
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only
      Tags:
        - Key: Application
          Value: !Ref Application
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Ref DomainName 

  MyHostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      Name: jaswanth.cf
      
  MyAliasRecordSet:
    Type: "AWS::Route53::RecordSet"
    Properties:
      Comment: "Invalid Alias A Record"
      HostedZoneId: !Ref "MyHostedZone"
      Name: "www.jaswanth.cf"
      Type: "A"
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  WebAcl:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: demowebacl
      Scope: "CLOUDFRONT"
      Description: sample ACL.
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: "demo"
        SampledRequestsEnabled: true
      Rules:
        - Name: "WafRule1"
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesCommonRuleSet"
          Priority: 1
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: "WafRule1"
            SampledRequestsEnabled: true
        - Name: "WafRule2"
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesPHPRuleSet"
          Priority: 2
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: "WafRule2"
            SampledRequestsEnabled: true
        - Name: "WafRule3"
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesUnixRuleSet"
          Priority: 3
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: "WafRule3"
            SampledRequestsEnabled: true
        - Name: "WafRule4"
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesWindowsRuleSet"
          Priority: 4
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: "WafRule4"
            SampledRequestsEnabled: true
        - Name: "WafRule5"
          Statement:
            ManagedRuleGroupStatement:
              VendorName: "AWS"
              Name: "AWSManagedRulesSQLiRuleSet"
          Priority: 5
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: "WafRule5"
            SampledRequestsEnabled: true

  SampleCloudFormationCodePipelineProject:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: SampleCloudFormationCodePipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: SourceStage
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Sub ${GitHubOwner}
                Repo: !Sub ${GitHubRepo}
                Branch: !Sub ${GitHubBranch}
                OAuthToken: !Sub ${GitHubToken}
              RunOrder: 1
        - Name: DeployStage
          Actions:
            - Name: SourceDeploy
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId: 
                Category: Deploy 
                Owner: AWS 
                Version: "1" 
                Provider: S3
              Configuration: 
                BucketName: 
                  !Ref S3Bucket
                Extract: true 
              RunOrder: 1  
      ArtifactStore:
        Location: !Ref S3Bucket
        Type: S3

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: codepipeline-service
        PolicyDocument:
          Statement:
          - Action:
            - codebuild:*
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource:
            - arn:aws:s3:::codepipeline*
            Effect: Allow
          - Action:
            - s3:*
            - cloudformation:*
            - iam:PassRole
            Resource: "*"
            Effect: Allow
          Version: '2012-10-17'

  Function:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os
          
          bucket_name = os.environ['BUCKET_NAME']
          
          s3 = boto3.resource('s3')
          bucket = s3.Bucket(bucket_name)
           
          CREATE = 'Create'
          DELETE = 'Delete'
          response_data = {}
          
          def lambda_handler(event, context):
            try:
              if event['RequestType'] == CREATE:
                  objects = bucket.objects.all()
                  print(objects)
              elif event['RequestType'] == DELETE:
                  bucket.object_versions.delete()
                  bucket.delete()
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket
      FunctionName: !Sub "${Prefix}-function"
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole.Arn
      Timeout: 300

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole          
      Policies:
        - PolicyName: !Sub "${Prefix}-S3Access"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  's3:*'
                Resource:
                  - !Ref BucketArn
                  - !Sub "${S3Bucket.Arn}/*"
  CustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt Function.Arn   

Outputs:
  CloudFrontDistribution:
    Description: CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName
  CloudFrontDomainName:
    Description: Website address
    Value: !Sub '${DomainName}'
  BucketName:
    Value: !Ref 'DomainName'
    Description: Name of S3 bucket 
  SecureURLToAccessWebserver:
    Description: URL Name to access the static website
    Value: !Sub '${DomainName}'  
